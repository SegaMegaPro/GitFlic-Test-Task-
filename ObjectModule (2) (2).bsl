
///////////////////////////////////////////////////////////////////////////////////////////////////////
// Разработка - Кренделев Алексей, krenal@rarus.ru.
///////////////////////////////////////////////////////////////////////////////////////////////////////

/* Operators Check */
= > < <= >= <> != + - * / % += -= *= /= << >> & |
/* Operators Check */

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает сведения о внешней обработке.
// 
// Возвращаемое значение:
//  Структура - Сведения о внешней обработке:
// * Вид - Строка
// * Наименование - Строка
// * Версия - Строка
// * БезопасныйРежим - Булево
// * Информация - Строка
// * Команды - ТаблицаЗначений:
// ** Представление - Строка
// ** Идентификатор - Строка
// ** Использование - Строка
// ** ПоказыватьОповещение - Булево
// ** Модификатор - Строка
//
Контекст
Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("Вид", "ДополнительныйОтчет");

	ПараметрыРегистрации.Вставить("Наименование", "Изменения в платформе 1С");
	ПараметрыРегистрации.Вставить("Версия", "1.0.0.1");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация",
		"Отчет позволяет просматривать изменения в платформе 1С в разрезе функционала или версий.");

	ТаблицаКоманд = ПолучитьТаблицуКоманд();

	ДобавитьКоманду(ТаблицаКоманд, "Изменения в платформе 1С", "1", "ОткрытиеФормы", Истина, "");

	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);

	Возврат ПараметрыРегистрации;

КонецФункции

// Выполняет чтение файлов описания изменений 1С.
//
Процедура ПрочитатьНаСервере() Экспорт

	Изменения.Очистить();

	Если Версия_83 Тогда
		ПутьКФайлу = КаталогПрограммы();
		ПутьКФайлу = СтрЗаменить(ПутьКФайлу, "bin\", "") + "docs\ru\V8Update.htm";
		ПрочитатьИнформациюИзФайла(ПутьКФайлу);
	КонецЕсли;

	Если Версия_82 Тогда
		ПрочитатьИнформациюИзФайлаВМакете("V82Update");
	КонецЕсли;

	Если Версия_81 Тогда
		ПрочитатьИнформациюИзФайлаВМакете("V81Update");
	КонецЕсли;

	Если Версия_80 Тогда
		ПрочитатьИнформациюИзФайлаВМакете("V80Update");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)

	Если Изменения.Количество() = 0 Тогда
		ПрочитатьНаСервере();
	КонецЕсли;

	СтандартнаяОбработка = Ложь;

	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	НастройкиОтчета.ДополнительныеСвойства.Вставить("ИмяОтчета", Метаданные().Имя);

	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("Изменения", Изменения);

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);

	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);

	ПроцессорВыводаВТабличныйДокумент = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВыводаВТабличныйДокумент.УстановитьДокумент(ДокументРезультат);
	ПроцессорВыводаВТабличныйДокумент.Вывести(ПроцессорКомпоновкиДанных);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьТаблицуКоманд()

	Команды = Новый ТаблицаЗначений;
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));

	Возврат Команды;

КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь,
	Модификатор = "")

	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

Функция ПолучитьФорматированнуюСтроку(СтрокаТаблицы)

	Результат = Новый ФорматированнаяСтрока("");

	ДочерниеУзлы = СтрокаТаблицы.ДочерниеУзлы;

	Для Каждого Узел Из ДочерниеУзлы Цикл

		Если Узел.ТипУзла = ТипУзлаDOM.Текст Тогда

			Результат = Новый ФорматированнаяСтрока(Результат, Узел.ПолныйТекст);

		ИначеЕсли Узел.ТипУзла = ТипУзлаDOM.Элемент Тогда

			НоваяСтрока = ПолучитьФорматированнуюСтроку(Узел);

			Если Узел.ИмяУзла = "a" Тогда // Это гиперссылка.
				Результат = Новый ФорматированнаяСтрока(Результат, Новый ФорматированнаяСтрока(НоваяСтрока, , , ,
					Узел.Гиперссылка));
			Иначе
				Результат = Новый ФорматированнаяСтрока(Результат, НоваяСтрока);
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Возврат Результат;

КонецФункции

Процедура ЗаполнитьФорматированныйДокумент(СтрокаТаблицы, Результат)

	ЭтоПараграф = (ТипЗнч(Результат) = Тип("ПараграфФорматированногоДокумента"));

	ТипПараграфаМаркированныйСписок = ТипПараграфа.МаркированныйСписок;
	ТипПараграфаОбычный = ТипПараграфа.Обычный;

	ДочерниеУзлы = СтрокаТаблицы.ДочерниеУзлы;

	Для Каждого Узел Из ДочерниеУзлы Цикл

		Если Узел.ТипУзла = ТипУзлаDOM.Текст Тогда

			РодительскийУзел = Узел.РодительскийУзел;

			Если ЭтоПараграф Тогда
				НовыйЭлемент = Результат.Элементы.Добавить(Узел.ПолныйТекст, Тип("ТекстФорматированногоДокумента"));
			Иначе
				НовыйЭлемент = Результат.Добавить(Узел.ПолныйТекст, Тип("ТекстФорматированногоДокумента"));
			КонецЕсли;

			Если РодительскийУзел.ИмяУзла = "a" Тогда
				НовыйЭлемент.НавигационнаяСсылка = РодительскийУзел.Гиперссылка;
			КонецЕсли;

			Если РодительскийУзел.ИмяУзла = "span" Тогда
				Если РодительскийУзел.ИмяКласса = "interface" Тогда
					НовыйЭлемент.ЦветТекста = Новый Цвет(53, 53, 255); //@skip-check new-color
				ИначеЕсли РодительскийУзел.ИмяКласса = "term" Тогда
					НовыйЭлемент.ЦветТекста = Новый Цвет(172, 51, 51); //@skip-check new-color
				Иначе
					Если ЗначениеЗаполнено(РодительскийУзел.ИмяКласса) Тогда
						СообщитьПользователю("Имя класса - " + РодительскийУзел.ИмяКласса);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

		ИначеЕсли Узел.ТипУзла = ТипУзлаDOM.Элемент Тогда

			Если Узел.ИмяУзла = "li" И ЭтоПараграф = Ложь Тогда
				НовыйЭлемент = Результат.Элементы.Добавить( , Тип("ПараграфФорматированногоДокумента"));
				НовыйЭлемент.ТипПараграфа = ТипПараграфаМаркированныйСписок;
				ЗаполнитьФорматированныйДокумент(Узел, НовыйЭлемент);
			Иначе

				ДобавленОбычныйПараграф = Ложь;
				Если ЭтоПараграф = Ложь Тогда

					КоличествоПараграфов = Результат.Элементы.Количество();
					Если КоличествоПараграфов > 0 И Результат.Элементы[КоличествоПараграфов - 1].ТипПараграфа
						<> ТипПараграфаОбычный Тогда // Начнем новый параграф.
						НовыйЭлемент = Результат.Элементы.Добавить( , Тип("ПараграфФорматированногоДокумента"));
						НовыйЭлемент.ТипПараграфа = ТипПараграфаОбычный;
						ДобавленОбычныйПараграф = Истина;
					КонецЕсли;

				КонецЕсли;

				Если (Узел.ИмяУзла = "p" Или Узел.ИмяУзла = "br") И Не ДобавленОбычныйПараграф Тогда
					Результат.Добавить( , Тип("ПереводСтрокиФорматированногоДокумента"));
				КонецЕсли;

				ЗаполнитьФорматированныйДокумент(Узел, Результат);

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура ПрочитатьИнформациюИзФайла(ПутьКФайлу)

	ЧтениеHTML = Новый ЧтениеHTML;

	ЧтениеHTML.ОткрытьФайл(ПутьКФайлу, "UTF-8");
	ПостроительDOM = Новый ПостроительDOM;
	ДокументHTML = ПостроительDOM.Прочитать(ЧтениеHTML);

	Для Каждого Узел Из ДокументHTML.Тело.ДочерниеУзлы Цикл

		Если Узел.ИмяУзла = "table" Тогда

			Раздел = "";
			КоличествоСтолбцовЗаголовка = 0;
			НоваяСтрока = Неопределено;

			СтрокиТаблицы = Узел.ДочерниеУзлы;
			Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
				
				// Анализируем количество элементов в заголовоке.
				Если СтрокаТаблицы.ИмяУзла = "thead" Тогда
					Раздел = Узел.ПредыдущийСоседний.ТекстовоеСодержимое;
					КоличествоСтолбцовЗаголовка = СтрокаТаблицы.ДочерниеУзлы[0].ДочерниеУзлы.Количество();
					Продолжить;
				КонецЕсли;

				КоличествоКолонок = СтрокаТаблицы.ДочерниеУзлы.Количество();
				Если КоличествоКолонок = КоличествоСтолбцовЗаголовка Тогда

					Если КоличествоКолонок = 4 Тогда

						НоваяСтрока = Изменения.Добавить();
						НоваяСтрока.Раздел = Раздел;
						НоваяСтрока.Функциональность = СтрокаТаблицы.ДочерниеУзлы[0].ТекстовоеСодержимое;
						НоваяСтрока.Версия = Сред(СтрокаТаблицы.Заголовок, 8);

						НоваяСтрока.КакСтало = СтрокаТаблицы.ДочерниеУзлы[1].ТекстовоеСодержимое;
						ФорматированныйДокумент = Новый ФорматированныйДокумент;
						ЗаполнитьФорматированныйДокумент(СтрокаТаблицы.ДочерниеУзлы[1], ФорматированныйДокумент);
						ФорматированныйДокумент.ПолучитьHTML(НоваяСтрока.КакСталоHTML, Неопределено);

						НоваяСтрока.КакБыло = СтрокаТаблицы.ДочерниеУзлы[2].ТекстовоеСодержимое;
						ФорматированныйДокумент = Новый ФорматированныйДокумент;
						ЗаполнитьФорматированныйДокумент(СтрокаТаблицы.ДочерниеУзлы[2], ФорматированныйДокумент);
						ФорматированныйДокумент.ПолучитьHTML(НоваяСтрока.КакБылоHTML, Неопределено);

						НоваяСтрока.РезультатИзменения = СтрокаТаблицы.ДочерниеУзлы[3].ТекстовоеСодержимое;
						ФорматированныйДокумент = Новый ФорматированныйДокумент;
						ЗаполнитьФорматированныйДокумент(СтрокаТаблицы.ДочерниеУзлы[3], ФорматированныйДокумент);
						ФорматированныйДокумент.ПолучитьHTML(НоваяСтрока.РезультатИзмененияHTML, Неопределено);

					ИначеЕсли КоличествоКолонок = 3 Тогда

						НоваяСтрока = Изменения.Добавить();
						НоваяСтрока.Раздел = Раздел;
						НоваяСтрока.Функциональность = Раздел;
						НоваяСтрока.Версия = Сред(СтрокаТаблицы.Заголовок, 8);

						НоваяСтрока.КакСтало = СтрокаТаблицы.ДочерниеУзлы[2].ТекстовоеСодержимое;
						ФорматированныйДокумент = Новый ФорматированныйДокумент;
						ЗаполнитьФорматированныйДокумент(СтрокаТаблицы.ДочерниеУзлы[2], ФорматированныйДокумент);
						ФорматированныйДокумент.ПолучитьHTML(НоваяСтрока.КакСталоHTML, Неопределено);

						НоваяСтрока.КакБыло = СтрокаТаблицы.ДочерниеУзлы[1].ТекстовоеСодержимое;
						ФорматированныйДокумент = Новый ФорматированныйДокумент;
						ЗаполнитьФорматированныйДокумент(СтрокаТаблицы.ДочерниеУзлы[1], ФорматированныйДокумент);
						ФорматированныйДокумент.ПолучитьHTML(НоваяСтрока.КакБылоHTML, Неопределено);

						НоваяСтрока.РезультатИзменения = СтрокаТаблицы.ДочерниеУзлы[0].ТекстовоеСодержимое;
						ФорматированныйДокумент = Новый ФорматированныйДокумент;
						ЗаполнитьФорматированныйДокумент(СтрокаТаблицы.ДочерниеУзлы[0], ФорматированныйДокумент);
						ФорматированныйДокумент.ПолучитьHTML(НоваяСтрока.РезультатИзмененияHTML, Неопределено);

					КонецЕсли;

				Иначе
					Если НоваяСтрока <> Неопределено Тогда
						НоваяСтрока.Примечание = СтрокаТаблицы.ТекстовоеСодержимое;
						НоваяСтрока.ПримечаниеXML = СериализаторXDTO.XMLСтрока(ПолучитьФорматированнуюСтроку(
							СтрокаТаблицы));
					Иначе
						СообщитьПользователю(Строка(КоличествоКолонок) + " - " + СтрокаТаблицы.ИмяУзла + " / "
							+ СтрокаТаблицы.ТипУзла + " / " + СтрокаТаблицы.ТекстовоеСодержимое);
					КонецЕсли;
				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

//@skip-check method-too-many-params
Процедура ОбработатьУзел(Узел, СписокВерсий, СписокРазделов, СписокФункций, Версия, Раздел, Функциональность,
	ВерсияВнутреннееИмя, Знач Уровень = 0, ЭтоГиперссылка = Ложь, НашлиПодчиненныеСписки = Ложь)

	ЭтоГиперссылка = Ложь;
	НашлиПодчиненныеСписки = Ложь;
	
	// Соберем список внутренних имен версий.
	Если Узел.ИмяУзла = "p" И Лев(Узел.ТекстовоеСодержимое, 7) = "Версия " Тогда

		ДочерниеУзлы = Узел.ДочерниеУзлы;
		Для Каждого СодержимоеУзла Из ДочерниеУзлы Цикл
			Если СодержимоеУзла.ИмяУзла = "a" И ЗначениеЗаполнено(СодержимоеУзла.Гиперссылка) Тогда

				ПозРешетки = СтрНайти(СодержимоеУзла.Гиперссылка, "#");
				Если ПозРешетки > 0 Тогда
					СписокВерсий.Добавить(РаскодироватьСтроку(Сред(СодержимоеУзла.Гиперссылка, ПозРешетки + 1),
						СпособКодированияСтроки.КодировкаURL));
					ЭтоГиперссылка = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		Если ЭтоГиперссылка Тогда
			Возврат;
		КонецЕсли;

	КонецЕсли;

	Если Узел.ИмяУзла = "a" И ЗначениеЗаполнено(Узел.Гиперссылка) Тогда

		ПозРешетки = СтрНайти(Узел.Гиперссылка, "#");
		Если ПозРешетки > 0 Тогда

			ЕстьОтступ = Ложь;
			Если Узел.ПредыдущийСоседний <> Неопределено И Узел.ПредыдущийСоседний.ТипУзла = ТипУзлаDOM.Текст
				И СтрДлина(Узел.ПредыдущийСоседний.ЗначениеУзла) > 0 И ПустаяСтрока(
				Узел.ПредыдущийСоседний.ЗначениеУзла) Тогда
				ЕстьОтступ = Истина;
			КонецЕсли;

			Если Уровень > 1 Или ЕстьОтступ Тогда
				СписокФункций.Добавить(РаскодироватьСтроку(Сред(Узел.Гиперссылка, ПозРешетки + 1),
					СпособКодированияСтроки.КодировкаURL));
			Иначе
				СписокРазделов.Добавить(РаскодироватьСтроку(Сред(Узел.Гиперссылка, ПозРешетки + 1),
					СпособКодированияСтроки.КодировкаURL));
			КонецЕсли;

			ЭтоГиперссылка = Истина;

		КонецЕсли;
	КонецЕсли;

	Если Узел.ИмяУзла = "h1" Или Узел.ИмяУзла = "h2" Или Узел.ИмяУзла = "h3" Или Узел.ИмяУзла = "h4" Или Узел.ИмяУзла
		= "u" Тогда

		ДочерниеУзлы = Узел.ДочерниеУзлы;
		Для Каждого СодержимоеУзла Из ДочерниеУзлы Цикл

			Если СодержимоеУзла.ИмяУзла = "a" Тогда
			
				// Версия.
				Если ЭтоГиперссылка = Ложь И СписокВерсий.Найти(СодержимоеУзла.Имя) <> Неопределено Тогда
					Версия = Сред(Узел.ТекстовоеСодержимое, 8);
					ВерсияВнутреннееИмя = СодержимоеУзла.Имя;
					Раздел = "";
					Функциональность = "";
					ЭтоГиперссылка = Истина;
				КонецЕсли;
				
				// Раздел.
				Если ЭтоГиперссылка = Ложь И СписокРазделов.Найти(СодержимоеУзла.Имя) <> Неопределено Тогда
					Раздел = ОбработатьСтрокуРаздела(Узел.ТекстовоеСодержимое);
					Функциональность = "";
					ЭтоГиперссылка = Истина;
				КонецЕсли;
				
				// Функциональность.
				Если ЭтоГиперссылка = Ложь И СписокФункций.Найти(СодержимоеУзла.Имя) <> Неопределено Тогда
					Функциональность = ОбработатьСтрокуРаздела(Узел.ТекстовоеСодержимое);
					ЭтоГиперссылка = Истина;
				КонецЕсли;

			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если Узел.ТипУзла = ТипУзлаDOM.Элемент Тогда

		Если Узел.ИмяУзла = "ul" Тогда // Начало списка.
			Уровень = Уровень + 1;
			НашлиПодчиненныеСписки = Истина;
		КонецЕсли;

		ВсегоПодчиненных = 0;
		ВсегоПодчиненныхГиперссылок = 0;

		ДочерниеУзлы = Узел.ДочерниеУзлы;
		Для Каждого ЭлементСписка Из ДочерниеУзлы Цикл

			Если ЭлементСписка.ТипУзла = ТипУзлаDOM.Текст Или Не ЗначениеЗаполнено(ЭлементСписка.ТекстовоеСодержимое) Тогда
				Продолжить;
			КонецЕсли;

			ЭтоГиперссылкаПодчиненного = Ложь;
			НашлиПодчиненныеСпискиПодчиненного = Ложь;
			ОбработатьУзел(ЭлементСписка, СписокВерсий, СписокРазделов, СписокФункций, Версия, Раздел,
				Функциональность, ВерсияВнутреннееИмя, Уровень, ЭтоГиперссылкаПодчиненного,
				НашлиПодчиненныеСпискиПодчиненного);

			ВсегоПодчиненных = ВсегоПодчиненных + 1;
			Если ЭтоГиперссылкаПодчиненного Тогда
				ВсегоПодчиненныхГиперссылок = ВсегоПодчиненныхГиперссылок + 1;
			КонецЕсли;

			Если НашлиПодчиненныеСпискиПодчиненного Тогда
				НашлиПодчиненныеСписки = Истина;
			КонецЕсли;

		КонецЦикла;

		Если ВсегоПодчиненных > 0 И ВсегоПодчиненных = ВсегоПодчиненныхГиперссылок Тогда
			ЭтоГиперссылка = Истина;
		КонецЕсли;

	КонецЕсли;

	Если ЭтоГиперссылка Тогда
		Возврат;
	КонецЕсли;
	
	// Записи.
	Если (Узел.ИмяУзла = "p" И Узел.РодительскийУзел.ИмяУзла <> "li") Или (Узел.ИмяУзла = "li" И Уровень = 1) Тогда

		Если Лев(Раздел, 8) <> "Переход " Тогда

			ТекстовоеСодержимое = Узел.ТекстовоеСодержимое;
			Если ЗначениеЗаполнено(ТекстовоеСодержимое) Тогда

				НоваяСтрока = Изменения.Добавить();
				НоваяСтрока.Раздел = Раздел;
				НоваяСтрока.Функциональность = ?(ЗначениеЗаполнено(Функциональность), Функциональность, Раздел);
				НоваяСтрока.Версия = Версия;

				НоваяСтрока.КакСтало = ТекстовоеСодержимое;
				ФорматированныйДокумент = Новый ФорматированныйДокумент;
				ЗаполнитьФорматированныйДокумент(Узел, ФорматированныйДокумент);
				ФорматированныйДокумент.ПолучитьHTML(НоваяСтрока.КакСталоHTML, Неопределено);

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ПрочитатьИнформациюИзФайлаСтарыйФормат(ПутьКФайлу)

	ЧтениеHTML = Новый ЧтениеHTML;

	ЧтениеHTML.ОткрытьФайл(ПутьКФайлу, "UTF-8");
	ПостроительDOM = Новый ПостроительDOM;
	ДокументHTML = ПостроительDOM.Прочитать(ЧтениеHTML);

	СписокВерсий = Новый Массив;
	СписокРазделов = Новый Массив;
	СписокФункций = Новый Массив;

	Версия = "";
	Раздел = "";
	Функциональность = "";

	ВерсияВнутреннееИмя = "";

	Для Каждого Узел Из ДокументHTML.Тело.ДочерниеУзлы Цикл
		ОбработатьУзел(Узел, СписокВерсий, СписокРазделов, СписокФункций, Версия, Раздел, Функциональность,
			ВерсияВнутреннееИмя);
	КонецЦикла;

КонецПроцедуры

Процедура ПрочитатьИнформациюИзФайлаВМакете(ИмяМакета)

	ПутьКФайлу = ПолучитьИмяВременногоФайла("htm");
	Макет = ПолучитьМакет(ИмяМакета);
	Макет.Записать(ПутьКФайлу);

	ПрочитатьИнформациюИзФайлаСтарыйФормат(ПутьКФайлу);

	УдалитьФайлы(ПутьКФайлу);

КонецПроцедуры

Функция ОбработатьСтрокуРаздела(ИсходнаяСтрока)

	Результат = СтрЗаменить(ИсходнаяСтрока, Символы.Пс, "");

	Если Не ПустаяСтрока(Результат) И Прав(Результат, 1) <> "." Тогда

		Результат = Результат + ".";

	КонецЕсли;

	Возврат Результат;

КонецФункции

Процедура СообщитьПользователю(ТекстСообщения)

	НовоеСообщение = Новый СообщениеПользователю;
	НовоеСообщение.Текст = ТекстСообщения;
	НовоеСообщение.Сообщить();

КонецПроцедуры

#КонецОбласти

#КонецЕсли